{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,gDAAwB;AACxB,qCAAmE;AAEnE,MAAM,MAAM,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;AAChD,MAAM,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAEvF,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;IACzB,YAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,MAAM,GAAW,IAAA,sBAAY,EAAC;IAChC,KAAK,EAAE,MAAM,EAAE,kDAAkD;IACjE,MAAM,EAAE,gBAAM,CAAC,OAAO,CAClB,gBAAM,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC,EAAE,wBAAwB;IAC7E,gBAAM,CAAC,IAAI,EAAE,EAAE,6BAA6B;IAC5C,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC,gBAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,gBAAM,CAAC,IAAI,EAAE,CAAC,oCAAoC;KACpH;IACD,UAAU,EAAE;QACR,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,0CAA0C;QACtF,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;YACrC,CAAC,CAAC;gBACI,IAAI,oBAAU,CAAC,OAAO,CAAC;oBACnB,MAAM,EAAE,gBAAM,CAAC,OAAO,CAClB,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,KAAK,SAAS,KAAK,KAAK,MAAM,OAAO,EAAE,CAAC,CAAC,oBAAoB;qBACjH;iBACJ,CAAC;aACL;YACH,CAAC,CAAC;gBACI,IAAI,oBAAU,CAAC,OAAO,CAAC;oBACnB,MAAM,EAAE,gBAAM,CAAC,OAAO,CAClB,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,KAAK,SAAS,KAAK,KAAK,MAAM,OAAO,EAAE,CAAC,CAAC,oBAAoB;qBACjH;oBACD,KAAK,EAAE,OAAO,EAAE,0BAA0B;iBAC7C,CAAC;aACL,CAAC;KACX;CACJ,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,SAAS,OAAO,CAAC,CAAC;AAE/E,kBAAe,MAAM,CAAC","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport { format, transports, createLogger, Logger } from 'winston';\r\n\r\nconst logDir = path.join(process.cwd(), 'logs');\r\nconst logFile = path.join(logDir, `app-${new Date().toISOString().split('T')[0]}.log`);\r\n\r\nif (!fs.existsSync(logDir)) {\r\n    fs.mkdirSync(logDir, { recursive: true });\r\n}\r\n\r\nconst logger: Logger = createLogger({\r\n    level: 'info', // Minimum log level: info and above (error, warn)\r\n    format: format.combine(\r\n        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), // Add timestamp to logs\r\n        format.json(), // Output logs in JSON format\r\n        process.env.NODE_ENV !== 'production' ? format.prettyPrint() : format.json() // Pretty print in dev, JSON in prod\r\n    ),\r\n    transports: [\r\n        new transports.File({ filename: logFile }), // Write logs to file specified by logFile\r\n        ...(process.env.NODE_ENV !== 'production'\r\n            ? [\r\n                  new transports.Console({ // Console logging for dev\r\n                      format: format.combine(\r\n                          format.printf(({ timestamp, level, message }) => `\\n${timestamp} [${level}]: ${message}`) // Custom log format\r\n                      ),\r\n                  }),\r\n              ]\r\n            : [\r\n                  new transports.Console({ // Console logging for prod, errors only\r\n                      format: format.combine(\r\n                          format.printf(({ timestamp, level, message }) => `\\n${timestamp} [${level}]: ${message}`) // Custom log format\r\n                      ),\r\n                      level: 'error', // Only log errors in prod\r\n                  }),\r\n              ]),\r\n    ],\r\n});\r\n\r\nlogger.info(`Logger initialized in ${process.env.NODE_ENV || 'unknown'} mode`);\r\n\r\nexport default logger;"]}