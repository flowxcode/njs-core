{"version":3,"file":"db.js","sourceRoot":"","sources":["../../src/db.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-await-in-loop */\r\n/* eslint-disable no-plusplus */\r\nimport { Client } from 'pg';\r\n\r\nimport logger from './logger';\r\n\r\nlet client: Client | null = null;\r\n\r\nasync function getClient(): Promise<Client> {\r\n  if (!client) {\r\n    const connectionString = process.env.AZURE_PG_CONNECTION;\r\n    if (!connectionString) {\r\n      throw new Error('AZURE_PG_CONNECTION environment variable is not set');\r\n    }\r\n    client = new Client({\r\n      connectionString,\r\n      keepAlive: true,\r\n      connectionTimeoutMillis: 2000, // Fail fast if connection fails\r\n      query_timeout: 5000, // Timeout queries after 5 seconds\r\n      statement_timeout: 0, // Disable for long-running batched inserts\r\n    });\r\n\r\n    client.on('error', (err) => {\r\n      logger.error('Database client error', {\r\n        error: err.message,\r\n        stack: err.stack,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      client = null; // Reset client on error\r\n    });\r\n\r\n    await client.connect();\r\n    logger.info('Database client connected', { timestamp: new Date().toISOString() });\r\n  }\r\n  return client;\r\n}\r\n\r\nexport default async function query<T = any>(\r\n  queryText: string,\r\n  params: any[] = [],\r\n  retries = 3,\r\n  delayMs = 1000\r\n): Promise<{ rows: T[] }> {\r\n  for (let attempt = 1; attempt <= retries; attempt++) {\r\n    try {\r\n      const pgClient = await getClient();\r\n      const result = await pgClient.query(queryText, params);\r\n      return { rows: result.rows };\r\n    } catch (error: any) {\r\n      if (attempt < retries && (error.message.includes('timeout') || error.code === '53300')) {\r\n        logger.warn(`Retry ${attempt}/${retries} for query: ${error.message}`, { queryText });\r\n        if (error.code === '53300') {\r\n          client = null; // Force reconnect on slot exhaustion\r\n        }\r\n        await new Promise((resolve) => setTimeout(resolve, delayMs));\r\n        continue;\r\n      }\r\n      logger.error('Query error', { error: error.message, stack: error.stack });\r\n      throw error;\r\n    }\r\n  }\r\n  throw new Error('Max retries reached');\r\n}\r\n\r\n// Cleanup on app shutdown\r\nprocess.on('SIGTERM', async () => {\r\n  if (client) {\r\n    await client.end();\r\n    logger.info('Database client disconnected');\r\n    client = null;\r\n  }\r\n});"]}